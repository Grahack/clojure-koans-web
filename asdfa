Yesterday Cymen and I worked on implementing the new dashboard for clients in Abacus - the modal window that pops up when you click on an individual client to inspect its projects/iterations/contacts. This turned out to be trickier/more interesting than expected. We were initially hampered by Chrome's outlandish caching behavior; the application in our browser was running an old, cached version of a JavaScript file, even though when we entered the file's URL in the address bar, it showed us the up-to-date version. After eventually sorting that out, we proceeded to start thinking about how best to accomplish our task.

The solution we came up with involved creating a new Backbone.js view called ClientDashboard. This view would serve as a container for two other views: the idea is that the left side of a client's dashboard would contain, say, billing information, while the right would contain project information, and these could be swapped out for other views separately. So ClientDashboard's job was mainly just to ensure that two other views got rendered correctly in the correct place whenever you clicked on a client.

The code for ClientDashboard turned out to be pretty simple in the end, but the spec was more challenging to write. In particular, we needed to verify that a certain local variable's render() method was being called with the correct parameter, as well as stubbing it out so we could remain agnostic about its effects. One way to go about would be refactoring to incorporate dependency injection, but it seemed like there was a more elegant solution: grab the variable's prototype through the global namespace, and stub its render() method! So that's what we did. The test passed. And a half-dozen completely unrelated tests began to fail.

The problem, it turned out, was that sinon.js stubs don't get removed at the end of Jasmine test suites. The stubs we were creating persisted throughout all the following tests, which was interfering with several of the latter. To correct for this, we set up an afterEach() hook for the ClientDashboard tests that returned all the stubbed-out global methods to their original values. Our elegant solution turned out not to be so elegant after all.

Next Waza, I think I might want to work on modifying the jasmine-sinon script so that to eliminate this problem. Thinking about it, this seems like a pretty interesting technical challenge. I'll need every call to sinon.stub() within a Jasmine suite to modify some global or instance variable in order to keep track of all the stubs that have been created within a test. Then I'll need to overwrite Jasmine's afterEach() function so that it frees all of these up in addition to whatever else the user specifies. The tricky part is that I'll presumably be testing all of these changes with Jasmine and sinon!